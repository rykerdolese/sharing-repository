---
title: "Bidding Wars: A Look into Consumer Tendencies on Ebay"
author: "Ryker Dolese"
format: pdf
fig_caption: yes
editor: visual
---

## **Introduction**

The dataset at the heart of this project centers around eBay bidding wars, where users compete for the chance to win a product through online auctions. These auctions have a unique competitive environment where bidders place bids, and the item goes to the highest bidder when the auction concludes. The specific focus of this project is on eBay auctions for Palm Pilot M515 PDAs, which were a popular personal digital assistant (PDA) device from the early 2000s. A Palm Pilot M515 PDA was a handheld electronic device designed for various tasks, including organization, note-taking, and data management, and this project will explore the dynamics of eBay auctions for these devices.

### **Statement of Purpose:**

The primary objective of this project is to examine the factors that influence the final selling price of Palm Pilot M515 PDAs in eBay auctions. To achieve this, we aim to address the following questions and goals:

1\. **Price Prediction**: Can we develop a predictive model that accurately estimates the closing price of Palm Pilot M515 PDAs in eBay auctions based on key variables such as the bid, bidder feedback rating, and bid timing?

2\. **Bidder Behavior Analysis**: What are the patterns and tendencies of eBay users in online auctions, and how do these behaviors impact the final selling price? Are there any effects of particular interest regarding bidder actions and outcomes?

### Introduction (Background and Plan):

To frame our project, we conducted extensive background research into the world of online auctions, eBay in particular, and the unique characteristics of Palm Pilot M515 PDAs. Our project's goals will be addressed through a combination of statistical analyses, including regression analysis, to predict selling prices. We will also utilize descriptive statistics and visualizations to explore bidder behavior and auction dynamics. Confidence intervals and hypothesis tests will help us draw meaningful conclusions about the factors that influence auction outcomes.

```{r, echo=FALSE}
suppressPackageStartupMessages({
library(knitr)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(broom)
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
library(gridExtra)
library(Matrix)
  library(glmnet)
  # Add more library calls as needed
})
setwd("~/Documents/STAT 410")
palm7 <- read.csv("Palm7day.csv")
palm5 <- read.csv("Palm5day.csv")
palm3 <- read.csv("Palm3day.csv")

palm3 <- mutate(palm3, AuctionLength = 3) ## just to clarify which auction length
palm5 <- mutate(palm5, AuctionLength = 5)
palm7 <- mutate(palm7, AuctionLength = 7)

palm_full <- bind_rows(palm7, palm5, palm3) # bind into one large dataset
durations <- read.csv("palmduration.csv")
#https://www.modelingonlineauctions.com/datasets


palm7 <- mutate(palm7, Biddate = ifelse(bidtime<6, "BeforeLast", "Last"))
palm7 <- palm7 %>%
  group_by(auctionid) %>%
  mutate(BidsBeforeLastMax = ifelse(Biddate == "BeforeLast", max(bid[Biddate == "BeforeLast"]), 0))
  
palm7 <- palm7 %>%
  group_by(auctionid) %>%
  summarise(
    AvgBid = mean(bid),
    TotalBids = n(),  
    BidsBeforeLast = sum(Biddate == "BeforeLast"),
    BidsAfterLast = sum(Biddate == "Last"),
    AverageRating = mean(bidderrate),
    UniqueBidders = length(unique(bidder))
  ) %>%
  left_join(palm7, by = "auctionid") %>%
  distinct(auctionid, .keep_all = TRUE) %>%
  select(auctionid, price, openbid, AvgBid, TotalBids, 
         BidsBeforeLast, BidsAfterLast, BidsBeforeLastMax, AverageRating, AuctionLength, UniqueBidders)



palm5 <- mutate(palm5, Biddate = ifelse(bidtime<4, "BeforeLast", "Last"))

palm5 <- palm5 %>%
  group_by(auctionid) %>%
  mutate(BidsBeforeLastMax = ifelse(Biddate == "BeforeLast", max(bid[Biddate == "BeforeLast"]), 0))
palm5 <- palm5 %>%
  group_by(auctionid) %>%
  summarise(
    AvgBid = mean(bid),
    TotalBids = n(),  
    BidsBeforeLast = sum(Biddate == "BeforeLast"),
    BidsAfterLast = sum(Biddate == "Last"),
    AverageRating = mean(bidderrate),
    UniqueBidders = length(unique(bidder))
  ) %>%
  left_join(palm5, by = "auctionid") %>%
  distinct(auctionid, .keep_all = TRUE) %>%
  select(auctionid, price, openbid, AvgBid, TotalBids, 
         BidsBeforeLast, BidsAfterLast, BidsBeforeLastMax, AverageRating, AuctionLength, UniqueBidders)


palm3 <- mutate(palm3, Biddate = ifelse(bidtime<2, "BeforeLast", "Last"))
palm3 <- palm3 %>%
  group_by(auctionid) %>%
  mutate(BidsBeforeLastMax = ifelse(Biddate == "BeforeLast", max(bid[Biddate == "BeforeLast"]), 0))
palm3 <- palm3 %>%
  group_by(auctionid) %>%
  summarise(
    AvgBid = mean(bid),
    TotalBids = n(),  
    BidsBeforeLast = sum(Biddate == "BeforeLast"),
    BidsAfterLast = sum(Biddate == "Last"),
    AverageRating = mean(bidderrate),
    UniqueBidders = length(unique(bidder))
  ) %>%
  left_join(palm3, by = "auctionid") %>%
  distinct(auctionid, .keep_all = TRUE) %>%
  select(auctionid, price, openbid, AvgBid, TotalBids, 
         BidsBeforeLast, BidsAfterLast, BidsBeforeLastMax, AverageRating, AuctionLength, UniqueBidders)

combined_data <- bind_rows(palm7, palm5, palm3)

combined_data <- combined_data %>%
  mutate(Perc_BidsAfterLast = (BidsAfterLast/TotalBids)*100)

combined_data <- combined_data[combined_data$openbid>5,] ## factor out some outliers

```

#### **Closer Look at the Data:**

In our dataset, acquired from https://www.modelingonlineauctions.com, there were 7 initial fields:

1.  auctionid - This field serves as a unique identifier for each auction in the dataset. It distinguishes one eBay auction from another and will be useful for tracking individual auction records.

2.  bid - The "bid" field represents the proxy bid placed by a bidder in the eBay auction. This is the amount the bidder is willing to pay for the item.

3.  bidtime - This field indicates the time, in days, when the bid was placed relative to the start of the auction. It provides insights into the timing of bids throughout the auction's duration.

4.  bidder - "bidder" contains the eBay username of the bidder participating in the auction. It identifies who is placing the bids.

5.  bidderrate - This field represents the eBay feedback rating of the bidder. eBay users typically provide feedback on their experiences with a bidder, and this rating can indicate their trustworthiness and history on the platform.

6.  openbid - "openbid" denotes the opening bid set by the seller when the auction began. It represents the initial price at which the item was offered for bidding.

7.  price - The "price" field indicates the closing price at which the item was sold in the auction. This closing price is calculated based on the second-highest bid plus an increment, as per eBay's auction rules.

## Exploratory Data Analysis

```{r, echo = FALSE, fig.cap = "Price and Auction Length"}

# Set the seed for reproducibility
set.seed(123)

# Randomly sample 10 unique auction IDs
sample_ids <- sample(unique(palm_full$auctionid), 10)

# Filter the dataset to include only the sampled auctions
palm_full_sample <- palm_full %>%
  filter(auctionid %in% sample_ids)

ggplot(palm_full_sample)+
  aes(bidtime, log(bid), fill = factor(auctionid), color = factor(auctionid))+
  geom_point()+
  facet_wrap(~factor(AuctionLength))+
  ggtitle("Bid price vs. Auction Time Elapsed by Auction Length")+
  ylab("Bid Price ($)")+
  xlab("Time Elapsed (days)")+
  theme_sjplot()
```

The plot provides a visual representation of a random sample of auctions and their bids over time. Notably, it reveals that, as auctions approach their final day, there is a significant and rapid increase in bidding activity, suggesting a distribution with exponential characteristics. Moreover, the plot indicates that auctions with shorter durations, such as 3 days and 5 days, experience this price increase much earlier in the bidding process.

This observation could imply that bidders are more motivated to participate as the auction deadline approaches, potentially due to a sense of urgency to secure the item they desire. Additionally, shorter auction durations may prompt quicker bidding and competitive behavior, leading to early price escalation.

#### Feature Engineering

As mentioned above, we have the data for every individual bid. However, it may be most ideal if we look at each auction wholistically. Therefore, we have grouped by 'auctionid' to create new metrics that could predict selling price. We use our previous data to identify these new features:

1.  **AvgBid**: represents the average bid placed in the auction. It's calculated as the mean of all the individual bids.

    -   Formula: **`AvgBid = mean(bid)`**

2.  **TotalBids**: TotalBids is the count of the total number of bids in the auction. It provides the total bidding activity for all auctions.

    -   Formula: **`TotalBids = n()`**

3.  **BidsBeforeLast**: indicates the number of bids placed before the last day in an auction. It helps identify the level of bidding activity prior to the closing stages of an auction.

    -   Formula: **`BidsBeforeLast = sum(Biddate == "BeforeLast")`**

4.  **BidsAfterLast**: represents the number of bids placed after the last day in an auction. It reflects the activity that occurs during the final moments of an auction.

    -   Formula: **`BidsAfterLast = sum(Biddate == "Last")`**

5.  **AverageRating**: the mean eBay feedback rating of the bidders in the auction. It provides an overall assessment of the bidders' trustworthiness and performance on eBay.

    -   Formula: **`AverageRating = mean(bidderrate)`**

6.  **UniqueBidders**: counts the number of unique eBay usernames (bidders) participating in the auctions. It identifies the diversity of bidders involved in the bidding process.

    -   Formula: **`UniqueBidders = length(unique(bidder))`**

```{r, echo = FALSE, fig.cap = "Distribution of Opening Bids"}
ggplot(combined_data) +
  aes(openbid) +
  #geom_histogram() +
  geom_density() + 
  ggtitle("Density Plot of Opening Bids") +
  ylab("Density") +
  xlab("Opening Bid ($)") +
  theme_sjplot()

```

The plot provides a clear representation of the distribution of opening bids, revealing a bimodal pattern. The majority of opening bids fall into two distinct categories: one with very low bids, typically less than \$10, and another with considerably higher opening bids, often around \$200, approaching the eventual selling price.

This bimodal distribution could suggest two different types of client behavior:

1.  Low-Budget Bidders: Bidders in the first group with very low opening bids may be looking for bargains or lower-priced items. They might be more price-sensitive and cautious in their initial bids, preferring to start with minimal offers.

```{=html}
<!-- -->
```
2.  Competitive Bidders: The second group with high opening bids approaching the final selling price might consist of more competitive or confident bidders. They might be willing to make larger initial bids to assert their interest in securing the item and to deter potential competition.

```{r, echo = FALSE, fig.cap = "Distribution of Total Bids"}
ggplot(combined_data) +
  aes(TotalBids, fill = factor(AuctionLength), color = factor(AuctionLength)) +
  geom_histogram(bins = 20) +
  facet_wrap(~factor(AuctionLength)) +
  ggtitle("Histogram of Number of Bids per Auction") +
  ylab("Density") +
  xlab("Number of Bids")
```

The plot illustrates the distribution of the number of bids per auction, revealing distinct patterns among different auction lengths. It's apparent that the number of bids tends to be right-skewed, particularly in shorter auctions like the 3-day auctions, where a significant proportion of auctions have fewer than 10 total bids. In contrast, the 5 and 7-day auctions exhibit a somewhat more uniform distribution but still maintain right-skewed tendencies.

Short auction durations appear to foster more rapid bidding, with a concentration of auctions having a limited number of bids. This could indicate a sense of urgency among bidders to participate and secure items quickly. Longer auctions display a somewhat more balanced distribution of bids, potentially reflecting a more gradual bidding process with less urgency. Bidders might take their time to assess the value of items and place bids at a steadier pace.

```{r, echo = FALSE, fig.cap = "Boxplot of Numerical Variables"}
library(ggplot2)

# Create the boxplots for each numerical variable
boxplots <- ggplot(combined_data) +
  aes(x = factor(AuctionLength), y = openbid, fill = factor(AuctionLength)) +
  geom_boxplot() +
  ggtitle("Boxplots of Opening Bids") +
  ylab("Opening Bid ($)") +
  xlab("Auction Length") +
  theme_minimal()

# Use facet_wrap to create subplots for different measures
boxplots_openbid <- boxplots

boxplots_totalbids <- ggplot(combined_data) +
  aes(x = factor(AuctionLength), y = TotalBids, fill = factor(AuctionLength)) +
  geom_boxplot() +
  ggtitle("Boxplots of Total Bids") +
  ylab("Total Bids") +
  xlab("Auction Length") +
  theme_minimal()

boxplots_price <- ggplot(combined_data) +
  aes(x = factor(AuctionLength), y = price, fill = factor(AuctionLength)) +
  geom_boxplot() +
  ggtitle("Boxplots of Price") +
  ylab("Price") +
  xlab("Auction Length") +
  theme_minimal()

boxplots_uniquebidders <- ggplot(combined_data) +
  aes(x = factor(AuctionLength), y = UniqueBidders, fill = factor(AuctionLength)) +
  geom_boxplot() +
  ggtitle("Boxplots of Unique Bidders") +
  ylab("Unique Bidders") +
  xlab("Auction Length") +
  theme_minimal()

# Create a grid of subplots

grid.arrange(boxplots_openbid, boxplots_totalbids, boxplots_price, boxplots_uniquebidders, ncol = 2)

```

In this collection of boxplots, we observe varying trends across different measures for distinct auction lengths. Notably, the 5 and 7-day auctions exhibit similar characteristics, while the 3-day auctions display more sporadic patterns. In the realm of opening bids, the 3-day auctions show a broader range of values with pronounced outliers, indicating greater variability.

Conversely, the 5 and 7-day auctions reveal more tightly clustered opening bid values. The number of unique bidders tends to rise as auction length increases, with longer auctions showcasing a wider spread in the distribution of unique bidders. In 3-day auctions, there's a concentrated distribution with occasional extreme outliers. Similar patterns emerge with total bids, mirroring unique bidders. Remarkably, 3-day auctions maintain a wider range of total bid counts. Selling prices, on the other hand, appear relatively consistent across auction lengths, but 3-day auctions notably feature lower median selling prices compared to their longer counterparts, suggesting unique pricing dynamics in shorter auctions.

```{r, echo = FALSE}

# Create a scatterplot matrix
#pairs(combined_data[, c("openbid", "TotalBids", "price", "UniqueBidders", "AvgBid")], 
     # pch = 19)

correlation_matrix <- cor(combined_data[, c("price", "TotalBids", "openbid", "UniqueBidders", "AvgBid", "AuctionLength")])
rounded_correlation_matrix <- round(correlation_matrix, 4)

# Display the rounded correlation matrix using kable
kable(rounded_correlation_matrix, caption = "Correlation Matrix")
```

## Methods & Modelling

Now, we will begin producing our model to predict selling price. We will begin with a relatively simple linear regression model where we see the effect of average bid and auction length on price.

```{r, echo=FALSE, fig.cap = "Regression Modelling"}
price <- combined_data$price
openbid <- combined_data$openbid
AuctionLength <- combined_data$AuctionLength
TotalBids <- combined_data$TotalBids
BidsBeforeLast <- combined_data$BidsBeforeLast
BidsAfterLast <- combined_data$BidsAfterLast
AverageRating <- combined_data$AverageRating
AvgBid <- combined_data$AvgBid
BidsBeforeLastMax <- combined_data$BidsBeforeLastMax
PercentBidsLastDay <- combined_data$Perc_BidsAfterLast
UniqueBidders <- combined_data$UniqueBidders

ggplot(combined_data)+
  aes(AvgBid, price, fill=factor(AuctionLength), color = factor(AuctionLength))+
  geom_point(alpha=0.3)+
  geom_smooth(method = "lm", formula = y ~ x)+
  ggtitle("First Regression Model")+
  xlab("Average Bid ($)")+
  ylab("Selling Price ($)")

```

In this regression model plot, several key observations stand out. Firstly, there's a clear and positive linear correlation between the average bid and the selling price. As the average bid increases, the selling price consistently rises, indicating a direct relationship between these two factors. Notably, the plot showcases varied slopes for different auction lengths, emphasizing that the strength of this correlation differs across auction durations. While auction length does exert some influence on the correlation, it doesn't significantly alter the overall positive trend. In essence, this plot underscores the robust positive relationship between average bid and selling price, with some nuanced variations in the influence of auction length.

```{r, echo = FALSE}
# Obtain summary statistics including the F-statistic

model <- lm(price ~ AvgBid + AuctionLength)

model_summary <- broom::glance(model)[-7:-10]

# Obtain coefficients and standard errors
model_coefficients <- broom::tidy(model)


# Create a table using kable
kable(model_coefficients, caption = "First Model Summary")
kable(model_summary, caption = "Additional Statistics")
#summary(model)

```

The coefficients in the table reflect the estimated effects of the independent variables on the dependent variable. The intercept indicates the expected selling price when all other variables are zero, which might not have a practical interpretation. The coefficient for AvgBid suggests that for each one-unit increase in the average bid, the selling price is estimated to increase by approximately 0.2592 dollars. Likewise, the coefficient for AuctionLength implies that a one-unit increase in auction length is associated with an estimated selling price increase of approximately 3.1455 dollars. The accompanying statistics reveal that about 23.09% of the variation in selling price is explained by the model, indicating a statistically significant model. The degrees of freedom for residuals and the number of observations in the dataset are also provided.

#### New Model: MLR

Our previous model performed alright. Both coefficients had p-values well below the alpha = 0.05 threshold. However, only 23% of our variation can be explained by our model, which is not ideal. With the additional variables at our disposal, we can implement a more robust MLR model and see how it performs.

```{r, echo=FALSE}
model <- lm(price ~ AvgBid + AuctionLength + openbid + PercentBidsLastDay + TotalBids + UniqueBidders + AverageRating + BidsAfterLast)

model_summary <- broom::glance(model)[-7:-10]

# Obtain coefficients and standard errors
model_coefficients <- broom::tidy(model)


# Create a table using kable
kable(model_coefficients, caption = "Second Model Summary")
kable(model_summary, caption = "Additional Statistics")

```

Our improved model is notably strong, with an R-squared value of approximately 73.5%, adjusted to 72.4% when accounting for predictors. The Residual Standard Error is around 12.98, reflecting typical prediction errors. The model is highly statistically significant, as indicated by an F-statistic with a p-value of approximately 0.0000009. Lower p-values for individual predictors suggest their significance. Overall, the model effectively explains variation in the dependent variable, attaining a robust R-squared and a significant F-statistic.

### Regularization with Lasso

Lasso (Least Absolute Shrinkage and Selection Operator) regression is a linear regression technique used for feature selection and regularization. It's a modification of ordinary least squares (OLS) regression.

```{r, echo = FALSE}
set.seed(123)
# Load the glmnet package
#install.packages("glmnet")


# Create a data frame with your independent variables and the dependent variable (price)
data <- combined_data

# Specify your response variable and predictor variables
y <- data$price
X <- data.matrix(combined_data[, c("AvgBid", "AuctionLength", "openbid", 
                                   "Perc_BidsAfterLast", "TotalBids", "UniqueBidders", 
                                   "AverageRating", "BidsAfterLast")]) # Exclude the 'price' column
#x <- data.matrix(mtcars[, c('mpg', 'wt', 'drat', 'qsec')])
# Fit the Lasso regression model
lasso_model <- cv.glmnet(X, y, alpha = 1)  # alpha = 1 specifies Lasso regression

# Plot the Lasso regularization path (optional but useful to tune the lambda parameter)


# Perform cross-validation to select the best lambda
cv_lasso <- cv.glmnet(X, y, alpha = 1)  # alpha = 1 for Lasso

# Print the lambda value that minimizes the cross-validated error
best_lambda <- cv_lasso$lambda.min
plot(lasso_model)
legend("topright", legend = paste("Best Lambda =", round(best_lambda,4)), bty = "n")
#cat("Best Lambda:", best_lambda, "\n")

# Fit the final Lasso model with the best lambda
best_model <- glmnet(X, y, alpha = 1, lambda = best_lambda)
# Extract the coefficients


# Convert dgCMatrix to a regular matrix (matrix representation)
dense_matrix <- as.matrix(coef(best_model))

# Convert the dense matrix to a dataframe
best_model_summary <- as.data.frame(dense_matrix)


#use fitted best model to make predictions
y_predicted <- predict(best_model, s = best_lambda, newx = X)

#find SST and SSE
sst <- sum((y - mean(y))^2)
sse <- sum((y_predicted - y)^2)

#find R-Squared
rsq <- 1 - sse/sst
#best_model_summary
rsq_row <- data.frame(
  s0 = rsq)
rownames(rsq_row) <- "R-squared"
best_model_summary <-rbind(best_model_summary, rsq_row)
kable(best_model_summary, caption = "Summary of Lasso Regression")

```

The outcomes of Lasso regression have yielded an R-squared value that closely resembles the results of our conventional Multiple Linear Regression (MLR) model. This similarity in performance hints at the advantages of retaining the familiar MLR model. Its interpretability remains intact, and it continues to exhibit a high R-squared value. Consequently, we hold strong confidence in our MLR model's ability to effectively predict eBay selling prices with accuracy.
